// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protos

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// LibraryClient is the client API for Library service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type LibraryClient interface {
	// A server-to-client streaming RPC.
	ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (Library_ListBooksClient, error)
	FilterBooks(ctx context.Context, in *FilterBooksRequest, opts ...grpc.CallOption) (Library_FilterBooksClient, error)
	SubscribeForBookUpdates(ctx context.Context, in *SubscribeForBookUpdatesRequest, opts ...grpc.CallOption) (Library_SubscribeForBookUpdatesClient, error)
}

type libraryClient struct {
	cc grpc.ClientConnInterface
}

func NewLibraryClient(cc grpc.ClientConnInterface) LibraryClient {
	return &libraryClient{cc}
}

func (c *libraryClient) ListBooks(ctx context.Context, in *ListBooksRequest, opts ...grpc.CallOption) (Library_ListBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Library_ServiceDesc.Streams[0], "/library.Library/ListBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &libraryListBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Library_ListBooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type libraryListBooksClient struct {
	grpc.ClientStream
}

func (x *libraryListBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *libraryClient) FilterBooks(ctx context.Context, in *FilterBooksRequest, opts ...grpc.CallOption) (Library_FilterBooksClient, error) {
	stream, err := c.cc.NewStream(ctx, &Library_ServiceDesc.Streams[1], "/library.Library/FilterBooks", opts...)
	if err != nil {
		return nil, err
	}
	x := &libraryFilterBooksClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Library_FilterBooksClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type libraryFilterBooksClient struct {
	grpc.ClientStream
}

func (x *libraryFilterBooksClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *libraryClient) SubscribeForBookUpdates(ctx context.Context, in *SubscribeForBookUpdatesRequest, opts ...grpc.CallOption) (Library_SubscribeForBookUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &Library_ServiceDesc.Streams[2], "/library.Library/SubscribeForBookUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &librarySubscribeForBookUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Library_SubscribeForBookUpdatesClient interface {
	Recv() (*Book, error)
	grpc.ClientStream
}

type librarySubscribeForBookUpdatesClient struct {
	grpc.ClientStream
}

func (x *librarySubscribeForBookUpdatesClient) Recv() (*Book, error) {
	m := new(Book)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// LibraryServer is the server API for Library service.
// All implementations must embed UnimplementedLibraryServer
// for forward compatibility
type LibraryServer interface {
	// A server-to-client streaming RPC.
	ListBooks(*ListBooksRequest, Library_ListBooksServer) error
	FilterBooks(*FilterBooksRequest, Library_FilterBooksServer) error
	SubscribeForBookUpdates(*SubscribeForBookUpdatesRequest, Library_SubscribeForBookUpdatesServer) error
	mustEmbedUnimplementedLibraryServer()
}

// UnimplementedLibraryServer must be embedded to have forward compatible implementations.
type UnimplementedLibraryServer struct {
}

func (UnimplementedLibraryServer) ListBooks(*ListBooksRequest, Library_ListBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method ListBooks not implemented")
}
func (UnimplementedLibraryServer) FilterBooks(*FilterBooksRequest, Library_FilterBooksServer) error {
	return status.Errorf(codes.Unimplemented, "method FilterBooks not implemented")
}
func (UnimplementedLibraryServer) SubscribeForBookUpdates(*SubscribeForBookUpdatesRequest, Library_SubscribeForBookUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method SubscribeForBookUpdates not implemented")
}
func (UnimplementedLibraryServer) mustEmbedUnimplementedLibraryServer() {}

// UnsafeLibraryServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to LibraryServer will
// result in compilation errors.
type UnsafeLibraryServer interface {
	mustEmbedUnimplementedLibraryServer()
}

func RegisterLibraryServer(s grpc.ServiceRegistrar, srv LibraryServer) {
	s.RegisterService(&Library_ServiceDesc, srv)
}

func _Library_ListBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServer).ListBooks(m, &libraryListBooksServer{stream})
}

type Library_ListBooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type libraryListBooksServer struct {
	grpc.ServerStream
}

func (x *libraryListBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _Library_FilterBooks_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FilterBooksRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServer).FilterBooks(m, &libraryFilterBooksServer{stream})
}

type Library_FilterBooksServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type libraryFilterBooksServer struct {
	grpc.ServerStream
}

func (x *libraryFilterBooksServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

func _Library_SubscribeForBookUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(SubscribeForBookUpdatesRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(LibraryServer).SubscribeForBookUpdates(m, &librarySubscribeForBookUpdatesServer{stream})
}

type Library_SubscribeForBookUpdatesServer interface {
	Send(*Book) error
	grpc.ServerStream
}

type librarySubscribeForBookUpdatesServer struct {
	grpc.ServerStream
}

func (x *librarySubscribeForBookUpdatesServer) Send(m *Book) error {
	return x.ServerStream.SendMsg(m)
}

// Library_ServiceDesc is the grpc.ServiceDesc for Library service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Library_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "library.Library",
	HandlerType: (*LibraryServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ListBooks",
			Handler:       _Library_ListBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "FilterBooks",
			Handler:       _Library_FilterBooks_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "SubscribeForBookUpdates",
			Handler:       _Library_SubscribeForBookUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "library.proto",
}
